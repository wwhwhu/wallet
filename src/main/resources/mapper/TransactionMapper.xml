<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.db.mapper.TransactionMapper">
  <resultMap id="BaseResultMap" type="com.db.entity.Transaction">
    <id column="transaction_id" jdbcType="INTEGER" property="transactionId" />
    <result column="sender_user_id" jdbcType="INTEGER" property="senderUserId" />
    <result column="recipient_user_id" jdbcType="INTEGER" property="recipientUserId" />
    <result column="recipient_email_id" jdbcType="INTEGER" property="recipientEmailId" />
    <result column="recipient_phone_number" jdbcType="VARCHAR" property="recipientPhoneNumber" />
    <result column="amount" jdbcType="DECIMAL" property="amount" />
    <result column="transaction_start_time" jdbcType="TIMESTAMP" property="transactionStartTime" />
    <result column="transction_finished_time" jdbcType="TIMESTAMP" property="transctionFinishedTime" />
    <result column="is_cancelled" jdbcType="BIT" property="isCancelled" />
    <result column="cancelled_time" jdbcType="TIMESTAMP" property="cancelledTime" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.db.entity.TransactionWithBLOBs">
    <result column="memo" jdbcType="LONGVARCHAR" property="memo" />
    <result column="cancelled_reason" jdbcType="LONGVARCHAR" property="cancelledReason" />
  </resultMap>
  <sql id="Base_Column_List">
    transaction_id, sender_user_id, recipient_user_id, recipient_email_id, recipient_phone_number, 
    amount, transaction_start_time, transction_finished_time, is_cancelled, cancelled_time
  </sql>
  <sql id="Blob_Column_List">
    memo, cancelled_reason
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from Transaction
    where transaction_id = #{transactionId,jdbcType=INTEGER}
  </select>
  <select id="selectByPhone" parameterType="java.lang.String" resultMap="ResultMapWithBLOBs">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from Transaction
    where recipient_phone_number = #{recipientPhoneNumber,jdbcType=VARCHAR}
  </select>
  <select id="selectByPhoneNum" parameterType="map" resultMap="ResultMapWithBLOBs">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from Transaction
    where recipient_phone_number = #{recipientPhoneNumber,jdbcType=VARCHAR} and sender_user_id = #{userId,jdbcType=INTEGER}
  </select>
  <select id="selectByEmailId" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from Transaction
    where recipient_email_id = #{recipientEmailId,jdbcType=INTEGER}
  </select>
  <select id="selectByEmail" parameterType="map" resultMap="ResultMapWithBLOBs">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from Transaction,Email,DeleteEmail
    where (TRANSACTION.recipient_email_id = EMAIL.email_id and EMAIL.email_address = #{email,jdbcType=VARCHAR} and sender_user_id = #{userId,jdbcType=INTEGER})
    or (TRANSACTION.recipient_email_id = DELETEEMAIL.email_id and DELETEEMAIL.email_address = #{email,jdbcType=VARCHAR} and sender_user_id = #{userId,jdbcType=INTEGER})
  </select>
  <select id="searchTransactionPerMonth" parameterType="map" resultMap="ResultMapWithBLOBs">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from Transaction
    where sender_user_id = #{userId,jdbcType=INTEGER} and YEAR(transaction_start_time) = #{year,jdbcType=INTEGER} and MONTH(transaction_start_time) = #{month,jdbcType=INTEGER}
  </select>
    <select id="selectByDateRange" parameterType="map" resultMap="ResultMapWithBLOBs">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from Transaction
    where sender_user_id = #{userId,jdbcType=INTEGER} and transaction_start_time between #{startTime,jdbcType=TIMESTAMP} and #{endTime,jdbcType=TIMESTAMP}
  </select>
  <select id="selectCancelledTransaction" parameterType="Integer" resultMap="ResultMapWithBLOBs">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from Transaction
    where sender_user_id = #{userId,jdbcType=INTEGER} and is_cancelled = 1
  </select>
  <select id="selectByUserId" parameterType="map" resultMap="ResultMapWithBLOBs">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from Transaction
    where sender_user_id = #{userId,jdbcType=INTEGER} and recipient_user_id = #{receiveId,jdbcType=INTEGER}
  </select>
  <select id="selectBestSeller" parameterType="map" resultType="com.db.util.BestSeller">
    SELECT
      T.transaction_id,
      T.sender_user_id,
      T.recipient_user_id,
      CASE
        WHEN T.recipient_email_id = E.email_id THEN E.email_address
        WHEN T.recipient_email_id = D.email_id THEN D.email_address
        ELSE NULL
        END AS email_address,
      T.recipient_phone_number,
      T.amount
    FROM
      Transaction T
        LEFT JOIN
      Email E ON T.recipient_email_id = E.email_id
        LEFT JOIN
      DeleteEmail D ON T.recipient_email_id = D.email_id
    WHERE
      T.sender_user_id = #{userId,jdbcType=INTEGER}
      AND T.transaction_start_time BETWEEN #{startTime,jdbcType=TIMESTAMP} AND #{endTime,jdbcType=TIMESTAMP}
      AND T.amount = (
      SELECT MAX(T2.amount)
      FROM Transaction T2
      WHERE
        T2.sender_user_id = #{userId,jdbcType=INTEGER}
        AND T2.transaction_start_time BETWEEN #{startTime,jdbcType=TIMESTAMP} AND #{endTime,jdbcType=TIMESTAMP}
    );
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from Transaction
    where transaction_id = #{transactionId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.db.entity.TransactionWithBLOBs" useGeneratedKeys="true" keyProperty="transactionId">
    insert into Transaction (transaction_id, sender_user_id, recipient_user_id, 
      recipient_email_id, recipient_phone_number, 
      amount, transaction_start_time, transction_finished_time, 
      is_cancelled, cancelled_time, memo, 
      cancelled_reason)
    values (#{transactionId,jdbcType=INTEGER}, #{senderUserId,jdbcType=INTEGER}, #{recipientUserId,jdbcType=INTEGER}, 
      #{recipientEmailId,jdbcType=INTEGER}, #{recipientPhoneNumber,jdbcType=VARCHAR}, 
      #{amount,jdbcType=DECIMAL}, #{transactionStartTime,jdbcType=TIMESTAMP}, #{transctionFinishedTime,jdbcType=TIMESTAMP}, 
      #{isCancelled,jdbcType=BIT}, #{cancelledTime,jdbcType=TIMESTAMP}, #{memo,jdbcType=LONGVARCHAR}, 
      #{cancelledReason,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.db.entity.TransactionWithBLOBs">
    insert into Transaction
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="transactionId != null">
        transaction_id,
      </if>
      <if test="senderUserId != null">
        sender_user_id,
      </if>
      <if test="recipientUserId != null">
        recipient_user_id,
      </if>
      <if test="recipientEmailId != null">
        recipient_email_id,
      </if>
      <if test="recipientPhoneNumber != null">
        recipient_phone_number,
      </if>
      <if test="amount != null">
        amount,
      </if>
      <if test="transactionStartTime != null">
        transaction_start_time,
      </if>
      <if test="transctionFinishedTime != null">
        transction_finished_time,
      </if>
      <if test="isCancelled != null">
        is_cancelled,
      </if>
      <if test="cancelledTime != null">
        cancelled_time,
      </if>
      <if test="memo != null">
        memo,
      </if>
      <if test="cancelledReason != null">
        cancelled_reason,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="transactionId != null">
        #{transactionId,jdbcType=INTEGER},
      </if>
      <if test="senderUserId != null">
        #{senderUserId,jdbcType=INTEGER},
      </if>
      <if test="recipientUserId != null">
        #{recipientUserId,jdbcType=INTEGER},
      </if>
      <if test="recipientEmailId != null">
        #{recipientEmailId,jdbcType=INTEGER},
      </if>
      <if test="recipientPhoneNumber != null">
        #{recipientPhoneNumber,jdbcType=VARCHAR},
      </if>
      <if test="amount != null">
        #{amount,jdbcType=DECIMAL},
      </if>
      <if test="transactionStartTime != null">
        #{transactionStartTime,jdbcType=TIMESTAMP},
      </if>
      <if test="transctionFinishedTime != null">
        #{transctionFinishedTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isCancelled != null">
        #{isCancelled,jdbcType=BIT},
      </if>
      <if test="cancelledTime != null">
        #{cancelledTime,jdbcType=TIMESTAMP},
      </if>
      <if test="memo != null">
        #{memo,jdbcType=LONGVARCHAR},
      </if>
      <if test="cancelledReason != null">
        #{cancelledReason,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.db.entity.TransactionWithBLOBs">
    update Transaction
    <set>
      <if test="senderUserId != null">
        sender_user_id = #{senderUserId,jdbcType=INTEGER},
      </if>
      <if test="recipientUserId != null">
        recipient_user_id = #{recipientUserId,jdbcType=INTEGER},
      </if>
      <if test="recipientEmailId != null">
        recipient_email_id = #{recipientEmailId,jdbcType=INTEGER},
      </if>
      <if test="recipientPhoneNumber != null">
        recipient_phone_number = #{recipientPhoneNumber,jdbcType=VARCHAR},
      </if>
      <if test="amount != null">
        amount = #{amount,jdbcType=DECIMAL},
      </if>
      <if test="transactionStartTime != null">
        transaction_start_time = #{transactionStartTime,jdbcType=TIMESTAMP},
      </if>
      <if test="transctionFinishedTime != null">
        transction_finished_time = #{transctionFinishedTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isCancelled != null">
        is_cancelled = #{isCancelled,jdbcType=BIT},
      </if>
      <if test="cancelledTime != null">
        cancelled_time = #{cancelledTime,jdbcType=TIMESTAMP},
      </if>
      <if test="memo != null">
        memo = #{memo,jdbcType=LONGVARCHAR},
      </if>
      <if test="cancelledReason != null">
        cancelled_reason = #{cancelledReason,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where transaction_id = #{transactionId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.db.entity.TransactionWithBLOBs">
    update Transaction
    set sender_user_id = #{senderUserId,jdbcType=INTEGER},
      recipient_user_id = #{recipientUserId,jdbcType=INTEGER},
      recipient_email_id = #{recipientEmailId,jdbcType=INTEGER},
      recipient_phone_number = #{recipientPhoneNumber,jdbcType=VARCHAR},
      amount = #{amount,jdbcType=DECIMAL},
      transaction_start_time = #{transactionStartTime,jdbcType=TIMESTAMP},
      transction_finished_time = #{transctionFinishedTime,jdbcType=TIMESTAMP},
      is_cancelled = #{isCancelled,jdbcType=BIT},
      cancelled_time = #{cancelledTime,jdbcType=TIMESTAMP},
      memo = #{memo,jdbcType=LONGVARCHAR},
      cancelled_reason = #{cancelledReason,jdbcType=LONGVARCHAR}
    where transaction_id = #{transactionId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.db.entity.Transaction">
    update Transaction
    set sender_user_id = #{senderUserId,jdbcType=INTEGER},
      recipient_user_id = #{recipientUserId,jdbcType=INTEGER},
      recipient_email_id = #{recipientEmailId,jdbcType=INTEGER},
      recipient_phone_number = #{recipientPhoneNumber,jdbcType=VARCHAR},
      amount = #{amount,jdbcType=DECIMAL},
      transaction_start_time = #{transactionStartTime,jdbcType=TIMESTAMP},
      transction_finished_time = #{transctionFinishedTime,jdbcType=TIMESTAMP},
      is_cancelled = #{isCancelled,jdbcType=BIT},
      cancelled_time = #{cancelledTime,jdbcType=TIMESTAMP}
    where transaction_id = #{transactionId,jdbcType=INTEGER}
  </update>
</mapper>